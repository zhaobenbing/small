ext {
    versionTags = [
            [start: "aarVersion = '", end: "'", path: '../../Sample/build.gradle'],
            [start: "aarVersion = '", end: "'", path: '../../README.md'],
            [start: "aarVersion = '", end: "'", path: '../../GETTING-STARTED.md'],
            [start: '"smallAarVersion" value="', end: '" />', path: '../../templates/activities/SmallLauncher/globals.xml.ftl']
    ]
}

def updateVersion(File f, String start, String end, version) {
    def s = ''
    def updated = false
    f.eachLine { line ->
        def loc = line.indexOf(start)
        if (loc > 0) {
            updated = true
            line = "${line.substring(0, loc)}${start}${version}${end}"
        }
        s += "$line\n"
    }
    if (updated) {
        f.write(s, 'utf-8')
    }
}

def updateVersions() {
    versionTags.each { Map<String, String> it ->
        def file = new File(project.rootDir, it.path)
        if (!file.exists()) return

        updateVersion(file, it.start, it.end, version)
    }
}

task ('checkVersions') .doLast {
    def changelog = project.file('CHANGELOG.md')
    if (!changelog.exists()) return

    def reader = new BufferedReader(new FileReader(changelog))
    def top = reader.readLine()
    reader.close()
    if (!top.startsWith("## $version")) {
        throw new RuntimeException(
                "The CHANGELOG should be update first. Required '$version', but got '$top'")
    }
}

task ('updateVersions') .doLast {
    updateVersions()
}

project.afterEvaluate {
    def upload = project.tasks['bintrayUpload']
    upload.dependsOn(project.tasks['checkVersions'])
    upload.doLast {
        updateVersions()
    }
}